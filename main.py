import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, WebAppInfo
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton, \
    CallbackQuery, message
from aiogram.utils.executor import start_webhook
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import config
import database as db
from aiogram_broadcaster import MessageBroadcaster
from typing import List, Union
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from datetime import datetime, date
from aiogram.types import ChatActions
import asyncio
import requests
import os
from urllib.parse import urlencode

bot = Bot(token=config.token, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())

class Form(StatesGroup):
    name = State()
    college = State()
    age = State()
    gender = State()
    city = State()
    bio = State()
    images = State()

    
@dp.message_handler(commands=['start'])
async def start_handler(message,  state: FSMContext):
    req = await db.add_user(message.from_user.id)
    if req == 'succes create user':
        await bot.send_message(message.chat.id, '<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å–µ –í–û–õ–ù–ï–ù–ò–ï</b>.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?:')
        await Form.name.set()

@dp.message_handler(state=Form.name)
async def get_name(message, state: FSMContext):
    await db.change_name(message.from_user.id, message.text)
    await message.reply("<b>–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!üòÅ</b>\n–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã —É—á–µ–±–Ω–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è?")#–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!üòÅ</b>\n
    await Form.college.set()

@dp.message_handler(state=Form.college)
async def get_college(message, state: FSMContext):
    await db.change_college(message.from_user.id, message.text)
    await message.reply('<b>–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?</b>')
    await Form.age.set()

@dp.message_handler(state=Form.age)
async def get_age(message, state: FSMContext):
    if message.text.isdigit():
        await db.change_age(message.chat.id, message.text)
        await message.reply('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ú—É–∂—Å–∫–æ–πüë®üèª'), KeyboardButton('–ñ–µ–Ω—Å–∫–∏–πüë©üèª‚Äçü¶∞')))
        await Form.gender.set()
    else:
        await message.reply('–ù–∞–ø–∏—à–∏ –≤–æ–∑—Ä–∞—Å—Ç <b>—á–∏—Å–ª–æ–º</b>')

@dp.message_handler(state=Form.gender)
async def get_gender(message, state: FSMContext):
    if message.text == "–ú—É–∂—Å–∫–æ–πüë®üèª":
        await db.change_gender(message.from_user.id, 1)
        await message.reply('–û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ —á—É—Ç—å-—á—É—Ç—å...üôÉ –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?')
        await Form.city.set()
    elif message.text == '–ñ–µ–Ω—Å–∫–∏–πüë©üèª‚Äçü¶∞':
        await db.change_gender(message.from_user.id, 1)
        await message.reply('–û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ —á—É—Ç—å-—á—É—Ç—å...üôÉ –ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?')
        await Form.city.set()
    else:
        await message.reply('–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞')

@dp.message_handler(state=Form.city)
async def get_city(message, state: FSMContext):
    await db.change_city(message.from_user.id, message.text)
    await message.reply('–ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç: <b>–∫—Ä–∞—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µüòé</b>')
    await Form.bio.set()

@dp.message_handler(state=Form.bio)
async def get_bio(message, state: FSMContext):
    await db.change_city(message.from_user.id, message.text)

    msg = await message.reply('–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–º–∞–∫—Å–∏–º—É–º 3)\n|–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: 0', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É')))
    async with state.proxy() as data:
        data['msg'] = msg.message_id
    await Form.images.set()

@dp.message_handler(state=Form.images, content_types=['photo', 'video', 'video_note', 'text'])
async def get_images(message, state: FSMContext):
    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É':
        await state.finish()
    file_id = ''
    if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
    elif message.content_type == 'video':
        file_id = message.video.file_id
    elif message.content_type == 'video_note':
        file_id = message.video_note.file_id
    
    await db.upload_file(message.from_user.id, file_id, message.content_type)
    count = await db.check_count_files(message.from_user.id)
    print(count)
    if count <= 3:
        async with state.proxy() as data:
            await message.reply(f'–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –∫—Ä—É–∂–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–º–∞–∫—Å–∏–º—É–º 3)\n|–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {count}', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É')))
    else:
        await message.reply('–°—É–ø–µ—Ä! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞, —Å–µ–π—á–∞—Å –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:')
        await state.finish()
    
    await message.delete()
    





if __name__ == '__main__':
    executor.start_polling(dp)